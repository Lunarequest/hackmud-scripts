diff --git a/node_modules/typescript/lib/lib.es5.d.ts b/node_modules/typescript/lib/lib.es5.d.ts
index e72f3e4..d9cd14d 100644
--- a/node_modules/typescript/lib/lib.es5.d.ts
+++ b/node_modules/typescript/lib/lib.es5.d.ts
@@ -313,7 +313,7 @@ interface FunctionConstructor {
     readonly prototype: Function;
 }
 
-declare var Function: FunctionConstructor;
+declare const Function: string;
 
 /**
  * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.
@@ -1051,26 +1051,59 @@ declare var URIError: URIErrorConstructor;
 
 interface JSON {
     /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
      * Converts a JavaScript Object Notation (JSON) string into an object.
      * @param text A valid JSON string.
+     * @param error An empty object, which will be given an error message in the event of error.
      * @param reviver A function that transforms the results. This function is called for each member of the object.
      * If a member contains nested objects, the nested objects are transformed before the parent object is.
      */
-    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
+    parse(text: string, error?: {}, reviver?: (this: any, key: string, value: any) => any): any;
     /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param error An empty object, which will be given an error message in the event of error.
      * @param replacer A function that transforms the results.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
-    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
+    stringify(value: any, error?: {}, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
     /**
+     * JSON.parse and JSON.stringify, have been modified so that they will never throw an error.
+     * The standard JSON additional arguments are each shifted to the right by 1.
+     *
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param error An empty object, which will be given an error message in the event of error.
      * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
-    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
+    stringify(value: any, error?: {}, replacer?: (number | string)[] | null, space?: string | number): string;
+    /**
+     * Converts a JavaScript Object Notation (JSON) string into an object.
+     * @param text A valid JSON string.
+     * @param reviver A function that transforms the results. This function is called for each member of the object.
+     * If a member contains nested objects, the nested objects are transformed before the parent object is.
+     */
+    oparse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
+    /**
+     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
+     * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param replacer A function that transforms the results.
+     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
+     */
+    ostringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
+    /**
+     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
+     * @param value A JavaScript value, usually an object or array, to be converted.
+     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.
+     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
+     */
+    ostringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
 }
 
 /**
